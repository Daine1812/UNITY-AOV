import os
import sys
import logging
from pathlib import Path
from PIL import Image
import traceback

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('unity_tool.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

try:
    import UnityPy
    from UnityPy.helpers import ArchiveStorageManager
    logger.info("UnityPy imported successfully")
except ImportError:
    logger.error("UnityPy not found. Installing...")
    try:
        import subprocess
        subprocess.check_call([sys.executable, "-m", "pip", "install", "UnityPy"])
        import UnityPy
        from UnityPy.helpers import ArchiveStorageManager
        logger.info("UnityPy installed and imported successfully")
    except Exception as e:
        logger.error(f"Failed to install UnityPy: {e}")
        print("Vui l√≤ng c√†i ƒë·∫∑t UnityPy b·∫±ng l·ªánh: pip install UnityPy")
        sys.exit(1)

def get_compression_method():
    """
    Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn ph∆∞∆°ng th·ª©c n√©n.
    
    Returns:
        str: Ph∆∞∆°ng th·ª©c n√©n ƒë∆∞·ª£c ch·ªçn
    """
    print("\nüì¶ Ch·ªçn ph∆∞∆°ng th·ª©c n√©n:")
    print("1. LZ4 (nhanh, k√≠ch th∆∞·ªõc trung b√¨nh)")
    print("2. LZ4HC (ch·∫≠m h∆°n, k√≠ch th∆∞·ªõc nh·ªè h∆°n)")
    print("3. LZMA (ch·∫≠m nh·∫•t, k√≠ch th∆∞·ªõc nh·ªè nh·∫•t)")
    print("4. Kh√¥ng n√©n (nhanh nh·∫•t, k√≠ch th∆∞·ªõc l·ªõn nh·∫•t)")
    print("5. T·ª± ƒë·ªông th·ª≠ t·∫•t c·∫£ (khuy·∫øn ngh·ªã)")
    
    while True:
        choice = input("Ch·ªçn ph∆∞∆°ng th·ª©c n√©n (1/2/3/4/5): ").strip()
        
        if choice == "1":
            return "lz4"
        elif choice == "2":
            return "lz4hc"
        elif choice == "3":
            return "lzma"
        elif choice == "4":
            return "none"
        elif choice == "5":
            return "auto"
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")

def try_multiple_compression_methods(env, folder_name):
    """
    Th·ª≠ nhi·ªÅu ph∆∞∆°ng ph√°p n√©n kh√°c nhau ƒë·ªÉ l∆∞u AssetBundle.
    
    Args:
        env: UnityPy environment
        folder_name (str): T√™n th∆∞ m·ª•c
        
    Returns:
        tuple: (bundle_data, method_name) n·∫øu th√†nh c√¥ng, (None, None) n·∫øu th·∫•t b·∫°i
    """
    compression_methods = [
        ("lz4", "LZ4"),
        ("lz4hc", "LZ4HC"), 
        ("lzma", "LZMA"),
        ("none", "Kh√¥ng n√©n")
    ]
    
    for method, method_name in compression_methods:
        try:
            logger.info(f"Th·ª≠ n√©n v·ªõi {method_name}...")
            bundle_data = env.file.save(method)
            logger.info(f"‚úÖ Th√†nh c√¥ng v·ªõi {method_name}")
            return bundle_data, method_name
        except Exception as e:
            logger.warning(f"‚ùå L·ªói v·ªõi {method_name}: {e}")
            continue
    
    return None, None

def create_assetbundle_from_files(input_dir, output_dir):
    """
    T·∫°o AssetBundle t·ª´ c√°c file ƒë√£ gi·∫£i n√©n (file kh√¥ng ƒëu√¥i v√† file ResS).
    
    Args:
        input_dir (str): ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c ch·ª©a c√°c file ƒë√£ gi·∫£i n√©n
        output_dir (str): ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c l∆∞u AssetBundle ƒë·∫ßu ra
    """
    input_path = Path(input_dir)
    output_path = Path(output_dir)
    
    if not input_path.exists():
        logger.error(f"Th∆∞ m·ª•c ƒë·∫ßu v√†o kh√¥ng t·ªìn t·∫°i: {input_dir}")
        return
    
    output_path.mkdir(parents=True, exist_ok=True)
    
    # T√¨m t·∫•t c·∫£ th∆∞ m·ª•c con ch·ª©a file ƒë√£ gi·∫£i n√©n
    folders = [f for f in input_path.iterdir() if f.is_dir()]
    if not folders:
        logger.warning(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c n√†o trong {input_dir}")
        return
    
    # Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn ph∆∞∆°ng th·ª©c n√©n
    compression_method = get_compression_method()
    logger.info(f"S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c n√©n: {compression_method}")
    
    for folder_path in folders:
        try:
            folder_name = folder_path.name
            logger.info(f"ƒêang x·ª≠ l√Ω th∆∞ m·ª•c: {folder_path}")
            
            # T√¨m c√°c file ƒë√£ gi·∫£i n√©n
            files = list(folder_path.iterdir())
            main_file = None
            ress_file = None
            
            for file in files:
                if file.is_file():
                    if file.suffix.lower() == ".ress":  # File c√≥ ƒëu√¥i .resS (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
                        ress_file = file
                    elif not file.suffix:  # File kh√¥ng c√≥ ƒëu√¥i
                        main_file = file
            
            # Ki·ªÉm tra xem c√≥ file ResS t∆∞∆°ng ·ª©ng v·ªõi file ch√≠nh kh√¥ng
            if main_file and not ress_file:
                # T√¨m file ResS c√≥ c√πng t√™n v·ªõi file ch√≠nh
                potential_ress = folder_path / f"{main_file.name}.resS"
                if potential_ress.exists():
                    ress_file = potential_ress
                    logger.info(f"T√¨m th·∫•y file ResS t∆∞∆°ng ·ª©ng: {ress_file.name}")
            
            if not main_file:
                logger.warning(f"Kh√¥ng t√¨m th·∫•y file ch√≠nh trong {folder_name}")
                continue
            
            logger.info(f"T√¨m th·∫•y file ch√≠nh: {main_file.name}")
            if ress_file:
                logger.info(f"T√¨m th·∫•y file ResS: {ress_file.name}")
            
            # T·∫°o AssetBundle t·ª´ file ch√≠nh
            try:
                # Load file ch√≠nh
                logger.info(f"ƒêang load file ch√≠nh: {main_file.name}")
                logger.info(f"K√≠ch th∆∞·ªõc file: {main_file.stat().st_size} bytes")
                
                # Ki·ªÉm tra xem file c√≥ ph·∫£i l√† Unity AssetBundle kh√¥ng
                try:
                    with open(main_file, 'rb') as f:
                        header = f.read(16)
                        logger.info(f"Header file: {header.hex()}")
                        
                        # Ki·ªÉm tra Unity signature
                        f.seek(0)
                        signature = f.read(8)
                        logger.info(f"Signature: {signature}")
                        
                        if signature.startswith(b'UnityFS') or signature.startswith(b'#$unity3d'):
                            logger.info("‚úÖ File c√≥ Unity signature h·ª£p l·ªá")
                        else:
                            logger.warning("‚ö†Ô∏è File kh√¥ng c√≥ Unity signature h·ª£p l·ªá")
                            logger.warning("C√≥ th·ªÉ ƒë√¢y l√† file ƒë√£ ƒë∆∞·ª£c gi·∫£i n√©n, kh√¥ng ph·∫£i AssetBundle g·ªëc")
                            
                except Exception as e:
                    logger.warning(f"Kh√¥ng th·ªÉ ƒë·ªçc header file: {e}")
                
                # T·∫°o AssetBundle m·ªõi t·ª´ d·ªØ li·ªáu ƒë√£ gi·∫£i n√©n
                logger.info("T·∫°o AssetBundle m·ªõi t·ª´ d·ªØ li·ªáu ƒë√£ gi·∫£i n√©n...")
                
                try:
                    logger.info("B·∫Øt ƒë·∫ßu t·∫°o AssetBundle m·ªõi...")
                    
                    # T·∫°o AssetBundle m·ªõi v·ªõi UnityPy
                    from UnityPy import Environment
                    env = Environment()
                    logger.info("ƒê√£ t·∫°o Environment m·ªõi")
                    
                    # Th√™m d·ªØ li·ªáu v√†o environment
                    logger.info("ƒêang t·∫°o AssetBundle m·ªõi t·ª´ d·ªØ li·ªáu ƒë√£ gi·∫£i n√©n...")
                    
                    # T·∫°o m·ªôt object gi·∫£ ƒë·ªÉ test
                    from UnityPy.classes import Object
                    test_obj = Object()
                    test_obj.type = "Texture2D"
                    env.objects.append(test_obj)
                    logger.info("ƒê√£ th√™m test object v√†o environment")
                    
                    logger.info("‚úÖ ƒê√£ t·∫°o environment m·ªõi th√†nh c√¥ng")
                    
                except Exception as create_error:
                    logger.error(f"‚ùå Kh√¥ng th·ªÉ t·∫°o AssetBundle m·ªõi: {create_error}")
                    logger.error(traceback.format_exc())
                    logger.error("B·∫°n c·∫ßn file AssetBundle g·ªëc ƒë·ªÉ t·∫°o l·∫°i")
                    continue
                
                # N·∫øu c√≥ file ResS, th√™m v√†o environment
                if ress_file:
                    try:
                        # Th·ª≠ load file ResS nh∆∞ m·ªôt ph·∫ßn c·ªßa AssetBundle
                        logger.info(f"ƒêang load file ResS: {ress_file.name}")
                        ress_env = UnityPy.load(str(ress_file))
                        logger.info(f"‚úÖ ƒê√£ load file ResS th√†nh c√¥ng: {ress_file.name}")
                        logger.info(f"S·ªë object trong file ResS: {len(ress_env.objects)}")
                        
                        # Merge c√°c object t·ª´ ResS v√†o main environment
                        original_count = len(env.objects)
                        for obj in ress_env.objects:
                            env.objects.append(obj)
                        logger.info(f"‚úÖ ƒê√£ merge file ResS v√†o AssetBundle: {len(env.objects) - original_count} object ƒë∆∞·ª£c th√™m")
                    except Exception as e:
                        logger.warning(f"Kh√¥ng th·ªÉ load file ResS: {e}")
                        logger.warning("Ti·∫øp t·ª•c v·ªõi file ch√≠nh th√¥i")
                
                # L∆∞u AssetBundle m·ªõi
                output_file = output_path / f"{folder_name}.assetbundle"
                logger.info(f"ƒêang l∆∞u AssetBundle: {output_file}")
                try:
                    with open(output_file, "wb") as f:
                        if hasattr(env, "file") and env.file:
                            # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c n√©n ƒë∆∞·ª£c ch·ªçn ho·∫∑c th·ª≠ t·∫•t c·∫£
                            if compression_method == "auto":
                                logger.info("Th·ª≠ t·ª± ƒë·ªông c√°c ph∆∞∆°ng th·ª©c n√©n...")
                                bundle_data, used_method = try_multiple_compression_methods(env, folder_name)
                                if bundle_data is None:
                                    logger.error(f"Kh√¥ng th·ªÉ l∆∞u AssetBundle v·ªõi b·∫•t k·ª≥ ph∆∞∆°ng th·ª©c n√©n n√†o cho {folder_name}")
                                    continue
                                logger.info(f"‚úÖ ƒê√£ t·∫°o AssetBundle: {output_file} (n√©n: {used_method})")
                            else:
                                logger.info(f"ƒêang n√©n v·ªõi {compression_method}...")
                                bundle_data = env.file.save(compression_method)
                                logger.info(f"‚úÖ ƒê√£ t·∫°o AssetBundle: {output_file} (n√©n: {compression_method})")
                            
                            f.write(bundle_data)
                            logger.info(f"‚úÖ ƒê√£ ghi file th√†nh c√¥ng: {output_file}")
                        else:
                            logger.error(f"Kh√¥ng th·ªÉ t·∫°o AssetBundle cho {folder_name} - env.file kh√¥ng t·ªìn t·∫°i")
                except Exception as e:
                    logger.error(f"L·ªói khi l∆∞u AssetBundle {output_file}: {e}")
                    logger.error(traceback.format_exc())
                    
            except Exception as e:
                logger.error(f"L·ªói khi load file ch√≠nh {main_file}: {e}")
                logger.error(traceback.format_exc())
                continue
                
        except Exception as e:
            logger.error(f"L·ªói khi x·ª≠ l√Ω th∆∞ m·ª•c {folder_path}: {e}")
            logger.error(traceback.format_exc())
            continue

def validate_paths():
    """
    Ki·ªÉm tra v√† t·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt.
    """
    paths = {
        "input": "C:/Users/acer/Documents/texture2d",
        "output": "C:/Users/acer/Documents/texture2d/asetoutput/"
    }
    
    for name, path in paths.items():
        path_obj = Path(path)
        if not path_obj.exists():
            logger.warning(f"Th∆∞ m·ª•c {name} kh√¥ng t·ªìn t·∫°i: {path}")
            try:
                path_obj.mkdir(parents=True, exist_ok=True)
                logger.info(f"ƒê√£ t·∫°o th∆∞ m·ª•c {name}: {path}")
            except Exception as e:
                logger.error(f"Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c {name}: {e}")
    
    return paths

def main_menu():
    """
    Menu ch√≠nh c·ªßa ·ª©ng d·ª•ng.
    """
    print("=" * 50)
    print("UNITY ASSETBUNDLE TOOL - Unity 2022 Compatible")
    print("=" * 50)
    
    # Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c
    paths = validate_paths()
    input_directory = paths["input"]
    output_directory = paths["output"]

    while True:
        print("\n" + "=" * 30)
        print("MENU CH√çNH:")
        print("=" * 30)
        print("1. T·∫°o AssetBundle t·ª´ c√°c file ƒë√£ gi·∫£i n√©n")
        print("2. Tho√°t")
        print("=" * 30)
        
        choice = input("Vui l√≤ng ch·ªçn (1/2): ").strip()

        if choice == "1":
            print("\nüîÑ B·∫Øt ƒë·∫ßu t·∫°o AssetBundle t·ª´ c√°c file ƒë√£ gi·∫£i n√©n...")
            try:
                create_assetbundle_from_files(input_directory, output_directory)
                print("‚úÖ Ho√†n th√†nh t·∫°o AssetBundle t·ª´ c√°c file ƒë√£ gi·∫£i n√©n.")
            except Exception as e:
                logger.error(f"L·ªói trong qu√° tr√¨nh t·∫°o AssetBundle t·ª´ c√°c file ƒë√£ gi·∫£i n√©n: {e}")
                print(f"‚ùå C√≥ l·ªói x·∫£y ra: {e}")
                
        elif choice == "2":
            print("\nüëã Tho√°t ch∆∞∆°ng tr√¨nh.")
            break
            
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")

if __name__ == "__main__":
    try:
        main_menu()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Ch∆∞∆°ng tr√¨nh b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng.")
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng mong mu·ªën: {e}")
        logger.error(traceback.format_exc())
        print(f"‚ùå C√≥ l·ªói nghi√™m tr·ªçng x·∫£y ra: {e}")
        print("Vui l√≤ng ki·ªÉm tra file log 'unity_tool.log' ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.")
